plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'
}

group = 'org.polypheny'
version = hasProperty('version') ? version : 'SNAPSHOT'

def majorVersion = 0
def minorVersion = 0
if (hasProperty('version')) {
    // Split version into major and minor components
    def versionComponents = version.split("\\.")
    majorVersion = versionComponents[0].toInteger()
    minorVersion = versionComponents[1].toInteger()
}

repositories {
    mavenCentral()
}

dependencies {
    // Add your dependencies here if needed
}

// Set the temporary folder path for version properties
def tempPropertiesFolder = file("${buildDir}/tmp")
def versionPropertiesFile = new File(tempPropertiesFolder, 'prism-api-version.properties')

task generateVersionProperties {
    outputs.file versionPropertiesFile

    doLast {
        // Ensure the temp directory exists
        tempPropertiesFolder.mkdirs()
        // Define the properties content
        def propertiesContent = "version=${version}\n" + "majorVersion=${majorVersion}\n" + "minorVersion=${minorVersion}"
        // Write to the properties file
        versionPropertiesFile.write(propertiesContent)
    }
}

task packageProto(type: Jar, dependsOn: generateVersionProperties) {
    // Copy the proto files to the desired package structure in the JAR
    from(fileTree('org/polypheny/prism').matching {
        include '**/*.proto'
    }) {
        into 'org/polypheny/prism'
    }
    // Include the properties file in the same package structure within the JAR
    from(versionPropertiesFile) {
        into 'org/polypheny/prism'
    }
    archiveFileName = "prism-${version}.jar"
}

artifacts {
    archives packageProto
}

jar {
    manifest {
        attributes 'Manifest-Version': '1.0'
        attributes 'Copyright': 'The Polypheny Project'
        attributes 'Group': project.group
        attributes 'Name': project.name
        attributes 'Version': project.version
    }
}

publishing {
    publications {
        packageProtoPublication(MavenPublication) {
            artifact tasks.packageProto
            pom {
                name = 'Prism API'
                description = 'The API definition files of the Polypheny Prism query interface.'
                url = 'https://polypheny.org/'
                licenses {
                    license {
                        name = 'Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0'
                    }
                }
                scm {
                    url = 'https://github.com/polypheny/Polypheny-Prism-API'
                }
                developers {
                    developer {
                        id = 'polypheny'
                        name = 'Polypheny'
                        email = 'mail@polypheny.org'
                    }
                }
            }
        }
    }
    repositories {
        maven {
            name = "OSSRH"
            def releasesRepoUrl = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotsRepoUrl = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            credentials {
                username = System.getenv("MAVEN_USERNAME")
                password = System.getenv("MAVEN_PASSWORD")
            }
        }
        maven {
            name = "GitHubPackages"
            url = "https://maven.pkg.github.com/polypheny/polypheny-prism-api"
            credentials {
                username = System.getenv("GITHUB_ACTOR")
                password = System.getenv("GITHUB_TOKEN")
            }
        }
    }
}

signing {
    required { gradle.taskGraph.hasTask("publish") }
    def signingKey = findProperty("signingKey")
    def signingPassword = findProperty("signingPassword")
    useInMemoryPgpKeys(signingKey, signingPassword)
    sign publishing.publications.packageProtoPublication
}
